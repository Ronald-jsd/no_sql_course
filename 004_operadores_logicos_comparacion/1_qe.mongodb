// Seleccionar la base de datos
use("UrbanStyle_store");

// Ver nombres de las colecciones disponibles
db.getCollectionNames();


// =========================
// COMPARACIONES SIMPLES DE COMPARACIÓN
// =========================

// Sintaxis: { atributo: { $operador: valor } }
// Operadores: 
// $lt (menor que), $lte (menor o igual), 
// $gt (mayor que), $gte (mayor o igual), $ne (diferente)

// Buscar productos cuyo tipo NO sea "caballero"
db.products.find(
    {
        tipo:
        {
            $ne: "caballero"    // $ ne = diferente que
        }
    },
    {
        _id: 0,
        nombre: 1,
        marca: 1,
        tipo: 1
    }
).count();


// =========================
// OPERADORES $in Y $nin
// =========================

// Sintaxis: { atributo: { $in: [valor1, valor2, ...] } }
// $in = el valor está dentro de la lista
// $nin = el valor NO está en la lista

// Buscar clientes cuyas preferencias sean "Dama" o "niño"
db.clients.find(
    {
        preferencias:
        {
            $in: ["Dama", "niño"]
        }
    }/*,
    {
        _id: 0,
        nombre: 1,
        telefono: 1,
        preferencias: 1
    }*/
);


/**-------------------------------------------------------- */


// =========================
// OPERADOR LÓGICO $and
// =========================
// Operadores lógicos: 
// $and (y), $or (o), $not (no), $nor (ninguno de los anteriores)
// Sintaxis: { $and: [ { atributo1: condición1 }, { atributo2: condición2 } ] }
// Ambas condiciones deben cumplirse

// Buscar productos con cantidad >= 100 Y precio >= 150
db.products.find(
    {
        $and:
            [
                {
                    cantidad: { $gte: 100 }
                },
                {
                    precio: { $gte: 150 }
                }
            ]
    }/*,
    {
        _id: 0,
        nombre: 1,
        marca: 1,
        tipo: 1
    }*/
);


// =========================
// OPERADOR LÓGICO $or
// =========================

// Sintaxis: { $or: [ { condición1 }, { condición2 } ] }
// Se cumple al menos una condición

// Buscar productos con cantidad >= 100 O precio < 100
db.products.find(
    {
        $or:
            [
                { cantidad: { $gte: 100 } },
                { precio: { $lt: 100 } }
            ]
    }/*,
    {
        _id: 0,
        nombre: 1,
        cantidad: 1,
        precio: 1
    }*/
);
